Title						Primary Environment			Standby Environment
-------------------------------------------------------------------------------------------------------------------------
DB_NAME						prod							prod
SID						prod						   	sec
DB_UNIQUE_NAME					prod						   	sec
IP						192.168.0.101						192.168.0.102
DATABASE VERSION		  		19.3.0.0						19.3.0.0

==========================================================================
							IN Primary
==========================================================================
nmtui
192.168.0.101
systemctl restart network
ifconfig

hostnamectl status
hostnamectl set-hostname primarydb

#Re-login and verify the new hostname 
hostnamectl

#The "/etc/hosts" file must contain a fully qualified name for the server.

vim /etc/hosts
192.168.0.101   primarydb         primarydb
192.168.0.102   secondarydb       secondarydb

ping primary

#Automatic Setup
#If you plan to use the "oracle-database-preinstall-19c" package to perform all your prerequisite setup, issue the following command.

[root@primarydb ~]# yum install -y oracle-database-preinstall-19c

#Additional Setup
passwd oracle

#Set secure Linux to permissive by editing the "/etc/selinux/config" file, making sure the SELINUX flag is set as follows.
SELINUX=permissive

#Once the change is complete, restart the server or run the following command.
setenforce Permissive

#If you have the Linux firewall enabled, you will need to disable or configure it, as shown here. To disable it, do the following.

systemctl stop firewalld
systemctl disable firewalld


#Create the directories in which the Oracle software will be installed.

mkdir -p /u01/app/oracle/product/19.0.0/dbhome_1
mkdir -p /u02/oradata
chown -R oracle:oinstall /u01 /u02
chmod -R 775 /u01 /u02


#Create a "scripts" directory.
mkdir /home/oracle/scripts

#Create an environment file called "setEnv.sh".
cat > /home/oracle/scripts/setEnv.sh <<EOF
# Oracle Settings
export TMP=/tmp
export TMPDIR=\$TMP

export ORACLE_HOSTNAME=primarydb
export ORACLE_UNQNAME=prod
export ORACLE_BASE=/u01/app/oracle
export ORACLE_HOME=\$ORACLE_BASE/product/19.0.0/dbhome_1
export ORA_INVENTORY=/u01/app/oraInventory
export ORACLE_SID=prod
export DATA_DIR=/u02/oradata

export PATH=/usr/sbin:/usr/local/bin:\$PATH
export PATH=\$ORACLE_HOME/bin:\$PATH

export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib
export CLASSPATH=\$ORACLE_HOME/jlib:\$ORACLE_HOME/rdbms/jlib
EOF

#Add a reference to the "setEnv.sh" file at the end of the "/home/oracle/.bash_profile" file.
echo ". /home/oracle/scripts/setEnv.sh" >> /home/oracle/.bash_profile

#Create a "start_all.sh" and "stop_all.sh" script that can be called from a startup/shutdown service. Make sure the ownership and permissions are correct.

cat > /home/oracle/scripts/start_all.sh <<EOF
#!/bin/bash
. /home/oracle/scripts/setEnv.sh

export ORAENV_ASK=NO
. oraenv
export ORAENV_ASK=YES

dbstart \$ORACLE_HOME
EOF

cat > /home/oracle/scripts/stop_all.sh <<EOF
#!/bin/bash
. /home/oracle/scripts/setEnv.sh

export ORAENV_ASK=NO
. oraenv
export ORAENV_ASK=YES

dbshut \$ORACLE_HOME
EOF


#Install Oracle 19c Software
[oracle@primarydb ~]$ env | grep ORA
[oracle@primarydb ~]$ cd $ORACLE_HOME

[oracle@primarydb dbhome_1]$ unzip -oq LINUX.X64_193000_db_home.zip
[oracle@primarydb dbhome_1]$ ./runInstaller

Now we will follow all previous step to setup secondary database
just need some modification on setEnv.sh

cat > /home/oracle/scripts/setEnv.sh <<EOF
# Oracle Settings
export TMP=/tmp
export TMPDIR=\$TMP

export ORACLE_HOSTNAME=secondarydb
export ORACLE_UNQNAME=sec
export ORACLE_BASE=/u01/app/oracle
export ORACLE_HOME=\$ORACLE_BASE/product/19.0.0/dbhome_1
export ORA_INVENTORY=/u01/app/oraInventory
export ORACLE_SID=sec
export DATA_DIR=/u02/oradata

export PATH=/usr/sbin:/usr/local/bin:\$PATH
export PATH=\$ORACLE_HOME/bin:\$PATH

export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib
export CLASSPATH=\$ORACLE_HOME/jlib:\$ORACLE_HOME/rdbms/jlib
EOF



Database Creation
You create a database using the Database Configuration Assistant (DBCA)
 
[oracle@primarydb ~]$ mkdir -p /u02/app/oracle/arch

========================================================
Oracle Data Guard Physical Standby Configuration
========================================================
Primary must run in archive log mode. Check the archive log mode
SQL> SELECT log_mode FROM v$database;
SQL> ALTER SYSTEM SET log_archive_dest_1='location=/u02/app/oracle/arch' SCOPE=both;
SQL> shut immediate;
SQL> startup mount;
SQL> alter database archivelog;
SQL> alter database open;
SQL> archive log list;


#Enable force logging on primary
SQL> select name, force_logging from v$database;
SQL> alter database force logging;


========================================================
Create standby log files:
========================================================
SQL> select GROUP#, THREAD#, bytes/1024/1024, MEMBERS, STATUS from v$log;
SQL> select GROUP#,member from v$logfile;


ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 11 '/u01/app/oracle/oradata/PROD/stb_redo11.log' SIZE 200M;
ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 12 '/u01/app/oracle/oradata/PROD/stb_redo12.log' SIZE 200M;
ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 13 '/u01/app/oracle/oradata/PROD/stb_redo13.log' SIZE 200M;
ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 14 '/u01/app/oracle/oradata/PROD/stb_redo14.log' SIZE 200M;

SELECT GROUP#,THREAD#,SEQUENCE#,ARCHIVED,STATUS FROM V$STANDBY_LOG;


Note: SRL size should be same with ORL in the primary otherwise they will not work


#Check DB_NAME & DB_UNIQUE_NAME
SQL> show parameter db_name NAME  
SQL> show parameter db_unique_name   

Note:- On standby have db_unique_name is sec.

#The LOG_ARCHIVE_FORMAT and LOG_ARCHIVE_MAX_PROCESSES parameters must be set to appropriate values and the
 REMOTE_LOGIN_PASSWORDFILE must be set to exclusive.
ALTER SYSTEM SET LOG_ARCHIVE_FORMAT='%t_%s_%r.arc' SCOPE=SPFILE;
ALTER SYSTEM SET LOG_ARCHIVE_MAX_PROCESSES=30;
ALTER SYSTEM SET REMOTE_LOGIN_PASSWORDFILE=EXCLUSIVE SCOPE=SPFILE;

#The STANDBY_FILE_MANAGEMENT parameter must be set AUTO.
SQL> alter system set standby_file_management = 'AUTO';

#If flashback parameters are not set properly, use below commands

SQL> show parameter recovery;
SQL> alter system set db_recovery_file_dest_size=20g;
SQL> alter system set db_recovery_file_dest='/u02/app/oracle/fast_recovery_area';
SQL> select flashback_on from v$database;
SQL> alter database flashback on;

#Now configure a listener for your Primary Database using the NETMGR command & make TNS service on both sides (Primary).
vim $ORACLE_HOME/network/admin/tnsnames.ora

prod =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = primarydb)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = prod)
    )
  )

sec =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = secondarydb)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = sec)
    )
  )

LISTENER_PRM =
  (ADDRESS = (PROTOCOL = TCP)(HOST = primarydb)(PORT = 1521))


[oracle@primarydb ~]$ vim $ORACLE_HOME/network/admin/listener.ora
# listener.ora Network Configuration File: /u01/app/oracle/product/19.0.0/dbhome_1/network/admin/listener.ora

LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = primarydb)(PORT = 1521))
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
  )

SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
      (GLOBAL_DBNAME = prod)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = prod)
    )
    (SID_DESC =
      (GLOBAL_DBNAME = prod_DGMGRL)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = prod)
    )
  )

ADR_BASE_LISTENER = /u01/app/oracle


[oracle@primarydb ~]$ lsnrctl stop
[oracle@primarydb ~]$ lsnrctl start

#Send the file in secondary server 
cd $ORACLE_HOME/network/admin/
scp tnsnames.ora listener.ora oracle@secondary:$ORACLE_HOME/network/admin/

Configure redo transport

Configure redo transport from primary to standby:
On Primary Server
=================
SQL> alter system set log_archive_dest_2 = 'service=sec async valid_for=(online_logfiles,primary_role) db_unique_name=sec';

service -> define on tns file

Setup FAL (Fetch Archive Log) server:
On Primary Server
=================
SQL> alter system set fal_server = 'sec';
SQL> alter system set fal_client='prm'; 

Setup Data Guard configuration on primary: This parameter will let primary database know which databases are in data guard configuration

On Primary Server
=================
SQL> alter system set log_archive_config = 'dg_config=(prm,sec)';



#Create pfile from spfile for the standby database.
SQL> create pfile='/tmp/initsec.ora' from spfile;

[oracle@primarydb ~]$scp /tmp/initsec.ora oracle@secondarydb:/tmp


#Create password file for standby: This is needed for cloning purpose. Even if there is one password file in 
[oracle@primarydb ~]$ orapwd file=$ORACLE_HOME/dbs/orapwsec password=welcome123# 
[oracle@primarydb ~]$ scp $ORACLE_HOME/dbs/orapwsec oracle@secondarydb:$ORACLE_HOME/dbs


===============================================================
 IN Secondary
===============================================================
#Modify listener.ora and tnsnames.ora file
[oracle@secondarydb admin]$ lsnrctl start
[oracle@secondarydb admin]$ tnsping prm
[oracle@secondarydb admin]$ tnsping sec 


#Make some changes in pfile
[oracle@secondarydb ~]$ vim /tmp/initsec.ora 
:%s/prm/sec/g 

#change 
*.db_name='sec' 
to 
*.db_name='prod'

# cnange 
*.log_archive_dest_2='service=sec async valid_for=(all_logfiles,primary_role) db_unique_name=sec'
to 
*.log_archive_dest_2='service=prod async valid_for=(all_logfiles,primary_role) db_unique_name=prod'

#Change 
*.fal_client='sec'
*.fal_server='sec'
to 
*.fal_client='sec'
*.fal_server='prod'

#Change
*.log_archive_config='dg_config=(sec,sec)'
to
*.log_archive_config='dg_config=(prod,sec)'

#Change
*.control_files='/u01/app/oracle/oradata/SEC/control01.ctl','/u01/app/oracle/oradata/SEC/control02.ctl'
to
*.control_files='/u01/app/oracle/oradata/PROD/control01.ctl','/u01/app/oracle/oradata/PROD/control02.ctl'

#add line
*.db_file_name_convert='/u01/app/oracle/oradata/PROD/','/u01/app/oracle/oradata/SEC/'
*.log_file_name_convert='/u01/app/oracle/oradata/PROD/','/u01/app/oracle/oradata/SEC/'
*.db_unique_name='sec'


#On standby, create directories as you find in the initsec.ora file
[oracle@secondarydb tmp]$ cat /tmp/initsec.ora
[oracle@secondarydb ~]$ mkdir -p /u01/app/oracle/admin/sec/adump /u01/app/oracle/oradata/SEC/ /u02/app/oracle/fast_recovery_area /u02/app/oracle/arch


#check the environment variable
[oracle@secondarydb ~]$ . .bash_profile
[oracle@secondarydb ~]$ env | grep ORA


#Now start standby instance using pfile at nomount stage.
[oracle@secondarydb ~]$ sqlplus / as sysdba
SQL> create spfile from pfile='/tmp/initsec.ora';
SQL> startup nomount;
SQL> show parameter spfile;
exit
Note: you must exit from sqlplus, else cloning will fail


[oracle@secondarydb ~]$ sqlplus / as sysdba
show parameter db_name NAME;
show parameter db_unique_name;
SHOW PARAMETER SERVICE_NAME;
SELECT instance_name FROM V$INSTANCE;
 
 
#Go to primary database
#Start Duplicating Database using RMAN

[oracle@primary ~]$ rman target sys@prod
RMAN> connect auxiliary sys@sec    
RMAN> DUPLICATE TARGET DATABASE FOR STANDBY FROM ACTIVE DATABASE NOFILENAMECHECK;

OR

[oracle@primarydb ~]$ rman target sys/password@prod auxiliary sys/password@sec 
RMAN> DUPLICATE TARGET DATABASE FOR STANDBY FROM ACTIVE DATABASE NOFILENAMECHECK;


From Primary
============================================
[oracle@secondarydb ~]$ sqlplus / as sysdba
SQL> alter database open read only;
 - start MRP command
SQL> alter database recover managed standby database disconnect;

SQL> select name,open_mode from v$database;


On both primary & standby:
==========================
SQL> set lines 999;
SQL> select * from v$dataguard_status order by timestamp;
SQL> select dest_id, status, destination, error from v$archive_dest where dest_id<=2;


IF you see any ORA error like ORA-16058, do this on primary:
============================================================
SQL> alter system set log_archive_dest_state_2='DEFER';
SQL> alter system set log_archive_dest_state_2='ENABLE';
SQL> select dest_id, status, destination, error from v$archive_dest where dest_id<=2;


On primary:
===========

SQL> select sequence#, first_time, next_time, applied, archived from v$archived_log where name = 'sec' order by first_time;
SQL> select STATUS, GAP_STATUS from V$ARCHIVE_DEST_STATUS where DEST_ID = 2;
SQL> archive log list;
SQL> select status,instance_name,database_role,protection_mode from v$database,v$instance;
SQL>  select max(sequence#) from v$archived_log;


On standby:
===========
SQL> select process, status, sequence# from v$managed_standby;
SQL> select sequence#, applied, first_time, next_time, name filename from v$archived_log order by sequence#;
SQL> select status,instance_name,database_role,protection_mode from v$database,v$instance;
SQL>  select max(sequence#) from v$archived_log;



Startup process
====================================
On Secondary
SQL> startup mount
SQL> database recover managed standby database disconnect;


Shutdown process
=========================================
On Secondary
SQL> alter database recover managed standby database cancel;
SQL> shut immediate;



On Secondary (Active DataGuard)
==============================================
SQL> alter database recover managed standby database cancel;
SQL> alter database open read only;
SQL> alter database recover managed standby database disconnect;
