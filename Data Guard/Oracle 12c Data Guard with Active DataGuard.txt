Title						Primary Environment			Standby Environment
-------------------------------------------------------------------------------
DB_NAME						orcl							orcl
SID							orcl						   orcl_dr
DB_UNIQUE_NAME				orcl						   orcl_dr
IP						192.168.0.101					192.168.0.102
DATABASE VERSION		  12.2.0.1						   12.2.0.1

==========================================================================
							IN Primary
==========================================================================
nmtui
192.168.0.101
systemctl restart network
ifconfig

hostnamectl status
hostnamectl set-hostname primary
#Re-login and verify the new hostname 
hostnamectl

#The "/etc/hosts" file must contain a fully qualified name for the server.
vim /etc/hosts
192.168.0.101   primary         primary
192.168.0.102   secondary       secondary

ping secondary

yum list oracle*
yum install -y oracle-database-server-12cR2-preinstall.x86_64

#Create the new groups and users.
groupadd -g 54321 oinstall
groupadd -g 54322 dba
groupadd -g 54323 oper
useradd -u 54321 -g oinstall -G dba,oper oracle

#Set password for the oracle user
passwd oracle

#Set secure Linux to permissive by editing the "/etc/selinux/config" file, making sure the SELINUX flag is set as follows.
vim /etc/selinux/config
SELINUX=permissive

#Once the change is complete, restart the server or run the following command.
setenforce Permissive

#If you have the Linux firewall enabled, you will need to disable or configure it, as shown here. To disable it, do the following.
systemctl stop firewalld
systemctl disable firewalld

#Create the directories in which the Oracle software will be installed.
mkdir -p /u01/app/oracle/product/12.2.0.1/db_1
chown -R oracle:oinstall /u01
chmod -R 775 /u01

#Create a "scripts" directory.
mkdir /home/oracle/scripts

#Create an environment file called "setEnv.sh".
cat > /home/oracle/scripts/setEnv.sh <<EOF
# Oracle Settings
export TMP=/tmp
export TMPDIR=\$TMP

export ORACLE_HOSTNAME=primary
export ORACLE_UNQNAME=orcl
export ORACLE_BASE=/u01/app/oracle
export ORACLE_HOME=\$ORACLE_BASE/product/12.2.0.1/db_1
export ORACLE_SID=orcl

export PATH=/usr/sbin:/usr/local/bin:\$PATH
export PATH=\$ORACLE_HOME/bin:\$PATH

export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib
export CLASSPATH=\$ORACLE_HOME/jlib:\$ORACLE_HOME/rdbms/jlib
EOF


#Add a reference to the "setEnv.sh" file at the end of the "/home/oracle/.bash_profile" file.
echo ". /home/oracle/scripts/setEnv.sh" >> /home/oracle/.bash_profile

#Create a "start_all.sh" and "stop_all.sh" script that can be called from a startup/shutdown service. 
Make sure the ownership and permissions are correct.
cat > /home/oracle/scripts/start_all.sh <<EOF
#!/bin/bash
. /home/oracle/scripts/setEnv.sh

export ORAENV_ASK=NO
. oraenv
export ORAENV_ASK=YES

dbstart \$ORACLE_HOME
EOF


cat > /home/oracle/scripts/stop_all.sh <<EOF
#!/bin/bash
. /home/oracle/scripts/setEnv.sh

export ORAENV_ASK=NO
. oraenv
export ORAENV_ASK=YES

dbshut \$ORACLE_HOME
EOF

chown -R oracle.oinstall /home/oracle/scripts
chmod u+x /home/oracle/scripts/*.sh


#Installation
Log into the oracle user.
Start the Oracle Universal Installer (OUI) by issuing the following command in the database directory.

./runInstaller

OR

#Export the bash profile

. .bash_profile


env | grep ORA

#Install Oracle 12c Software

cd $ORACLE_HOME

unzip -qo  OracleDatabase12.2.0.1.0.zip

cd $ORACLE_HOME/database

./runInstaller -ignoreSysPrereqs -showProgress -silent       \
oracle.install.option=INSTALL_DB_SWONLY                      \
ORACLE_HOSTNAME=primary                                      \
UNIX_GROUP_NAME=oinstall                                     \
INVENTORY_LOCATION=${ORA_INVENTORY}                          \
SELECTED_LANGUAGES=en,en_GB                                  \
ORACLE_HOME=${ORACLE_HOME}                                   \
ORACLE_BASE=${ORACLE_BASE}                                   \
oracle.install.db.InstallEdition=EE                          \
oracle.install.db.OSDBA_GROUP=dba                            \
oracle.install.db.OSOPER_GROUP=dba                           \
oracle.install.db.OSBACKUPDBA_GROUP=dba                      \
oracle.install.db.OSDGDBA_GROUP=dba                          \
oracle.install.db.OSKMDBA_GROUP=dba                          \
oracle.install.db.OSRACDBA_GROUP=dba                         \
SECURITY_UPDATES_VIA_MYORACLESUPPORT=false                   \
DECLINE_SECURITY_UPDATES=true                                \
oracle.installer.autoupdates.option=SKIP_UPDATES


DBCA Create 12c Database

#for silent database creation
dbca -silent -createDatabase                   \
-templateName General_Purpose.dbc              \
-gdbName ${ORACLE_SID}                         \
-sid ${ORACLE_SID}                             \
-createAsContainerDatabase false               \
-emConfiguration NONE                          \
-datafileDestination /u01/db_files             \
-storageType FS                                \
-characterSet AL32UTF8                         \
-totalMemory 1500                              \
-recoveryAreaDestination /u01/FRA              \
-sampleSchema true

#Post Installation
Edit the "/etc/oratab" file setting the restart flag for each instance to 'Y'.
cdb1:/u01/app/oracle/product/12.2.0.1/db_1:Y

#Once the installation is complete and you've edited the "/etc/oratab", you should be able to start/stop the database with the
 following scripts run from the "oracle" user.
~/scripts/start_all.sh
~/scripts/stop_all.sh

==========================================================================
IN Secondary
==========================================================================
nmtui
192.168.0.102
systemctl restart network
ifconfig

hostnamectl status
hostnamectl set-hostname secondary
#Re-login and verify the new hostname 
hostnamectl

#The "/etc/hosts" file must contain a fully qualified name for the server.
vim /etc/hosts
192.168.0.101   primary         primary
192.168.0.102   secondary       secondary

ping secondary

yum list oracle*
yum install -y oracle-database-server-12cR2-preinstall.x86_64

#Create the new groups and users.
groupadd -g 54321 oinstall
groupadd -g 54322 dba
groupadd -g 54323 oper
useradd -u 54321 -g oinstall -G dba,oper oracle

#Set password for the oracle user
passwd oracle

#Set secure Linux to permissive by editing the "/etc/selinux/config" file, making sure the SELINUX flag is set as follows.
vim /etc/selinux/config
SELINUX=permissive

#Once the change is complete, restart the server or run the following command.
setenforce Permissive

#If you have the Linux firewall enabled, you will need to disable or configure it, as shown here. To disable it, do the following.
systemctl stop firewalld
systemctl disable firewalld

#Create the directories in which the Oracle software will be installed.
mkdir -p /u01/app/oracle/product/12.2.0.1/db_1
chown -R oracle:oinstall /u01
chmod -R 775 /u01

#Create a "scripts" directory.
mkdir /home/oracle/scripts

#Create an environment file called "setEnv.sh".
cat > /home/oracle/scripts/setEnv.sh <<EOF
# Oracle Settings
export TMP=/tmp
export TMPDIR=\$TMP

export ORACLE_HOSTNAME=secondary
export ORACLE_UNQNAME=orcl_dr
export ORACLE_BASE=/u01/app/oracle
export ORACLE_HOME=\$ORACLE_BASE/product/12.2.0.1/db_1
export ORACLE_SID=orcl_dr

export PATH=/usr/sbin:/usr/local/bin:\$PATH
export PATH=\$ORACLE_HOME/bin:\$PATH

export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib
export CLASSPATH=\$ORACLE_HOME/jlib:\$ORACLE_HOME/rdbms/jlib
EOF


#Add a reference to the "setEnv.sh" file at the end of the "/home/oracle/.bash_profile" file.
echo ". /home/oracle/scripts/setEnv.sh" >> /home/oracle/.bash_profile

#Create a "start_all.sh" and "stop_all.sh" script that can be called from a startup/shutdown service. 
Make sure the ownership and permissions are correct.
cat > /home/oracle/scripts/start_all.sh <<EOF
#!/bin/bash
. /home/oracle/scripts/setEnv.sh

export ORAENV_ASK=NO
. oraenv
export ORAENV_ASK=YES

dbstart \$ORACLE_HOME
EOF


cat > /home/oracle/scripts/stop_all.sh <<EOF
#!/bin/bash
. /home/oracle/scripts/setEnv.sh

export ORAENV_ASK=NO
. oraenv
export ORAENV_ASK=YES

dbshut \$ORACLE_HOME
EOF

chown -R oracle.oinstall /home/oracle/scripts
chmod u+x /home/oracle/scripts/*.sh


#Installation
Log into the oracle user.
Start the Oracle Universal Installer (OUI) by issuing the following command in the database directory.

./runInstaller

OR

#Export the bash profile

. .bash_profile


env | grep ORA

#Install Oracle 12c Software

cd $ORACLE_HOME

unzip -qo  OracleDatabase12.2.0.1.0.zip

cd $ORACLE_HOME/database

./runInstaller -ignoreSysPrereqs -showProgress -silent       \
oracle.install.option=INSTALL_DB_SWONLY                      \
ORACLE_HOSTNAME=primary                                      \
UNIX_GROUP_NAME=oinstall                                     \
INVENTORY_LOCATION=${ORA_INVENTORY}                          \
SELECTED_LANGUAGES=en,en_GB                                  \
ORACLE_HOME=${ORACLE_HOME}                                   \
ORACLE_BASE=${ORACLE_BASE}                                   \
oracle.install.db.InstallEdition=EE                          \
oracle.install.db.OSDBA_GROUP=dba                            \
oracle.install.db.OSOPER_GROUP=dba                           \
oracle.install.db.OSBACKUPDBA_GROUP=dba                      \
oracle.install.db.OSDGDBA_GROUP=dba                          \
oracle.install.db.OSKMDBA_GROUP=dba                          \
oracle.install.db.OSRACDBA_GROUP=dba                         \
SECURITY_UPDATES_VIA_MYORACLESUPPORT=false                   \
DECLINE_SECURITY_UPDATES=true                                \
oracle.installer.autoupdates.option=SKIP_UPDATES

#We do not need to create the database

==========================================================================
Oracle Data Guard Physical Standby Configuration
==========================================================================
In Primary Server
================================================
#Check Primary Database must be running in archive log mode if not, change it.
SQL> SELECT log_mode FROM v$database; 
LOG_MODE
------------
NOARCHIVELOG 

SQL> SHUTDOWN IMMEDIATE;
SQL> STARTUP MOUNT;
SQL> ALTER DATABASE ARCHIVELOG;
SQL> ALTER DATABASE OPEN;

#Enable force logging using the following command.
SQL> select name, force_logging from v$database;
SQL> alter database force logging;
SQL> alter system switch logfile;

#Now create standby redo logs for switchovers and should be adding one extra.
SQL> select GROUP#,member from v$logfile;
SQL> SELECT thread#, group#, sequence#, bytes/1024/1024 "Size(MB)",archived ,status FROM v$log ORDER BY thread#, group#;

alter database add standby logfile THREAD 1 group 10 ('/u01/app/oracle/oradata/orcl/standby_redo01.log') size 200m; 
alter database add standby logfile THREAD 1 group 11 ('/u01/app/oracle/oradata/orcl/standby_redo02.log') size 200m;  
alter database add standby logfile THREAD 1 group 12 ('/u01/app/oracle/oradata/orcl/standby_redo03.log') size 200m;  
alter database add standby logfile THREAD 1 group 13 ('/u01/app/oracle/oradata/orcl/standby_redo04.log') size 200m;

Note: SRL size should be same with ORL in the primary otherwise they will not work


#Check DB_NAME & DB_UNIQUE_NAME
SQL> show parameter db_name NAME  
SQL> show parameter db_unique_name   

Note:- On standby have db_unique_name is orcl_dr.

#Set suitable remote archive log destinations. 
SQL> alter system set log_archive_dest_2 = 'service=orcl_dr async valid_for=(online_logfiles,primary_role) db_unique_name=orcl_dr';

Note: service -> define on tns file

#The STANDBY_FILE_MANAGEMENT parameter must be set AUTO.
ALTER SYSTEM SET STANDBY_FILE_MANAGEMENT=AUTO;

#The LOG_ARCHIVE_FORMAT and LOG_ARCHIVE_MAX_PROCESSES parameters must be set to appropriate values and the
 REMOTE_LOGIN_PASSWORDFILE must be set to exclusive.
ALTER SYSTEM SET LOG_ARCHIVE_FORMAT='%t_%s_%r.arc' SCOPE=SPFILE;
ALTER SYSTEM SET LOG_ARCHIVE_MAX_PROCESSES=30;
ALTER SYSTEM SET REMOTE_LOGIN_PASSWORDFILE=EXCLUSIVE SCOPE=SPFILE;

#Now configure a listener for your Primary Database using the NETMGR command & make TNS service on both sides (Primary & Standby).
vim $ORACLE_HOME/network/admin/tnsnames.ora

LISTENER_ORCL =
  (ADDRESS = (PROTOCOL = TCP)(HOST = primary)(PORT = 1521))
ORCL =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = primary)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = orcl)
    )
  )
ORCL_DR =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = secondary)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = orcl_dr)
    )
  )

#Configure listener on primary database.
vi $ORACLE_HOME/network/admin/listener.ora  
 LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = primary)(PORT = 1521))
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
  )
  
SID_LIST_LISTENER =
   (SID_LIST =
     (SID_DESC =
       (GLOBAL_DBNAME = orcl)
       (ORACLE_HOME = /u01/app/oracle/product/12.2.0.1/dbhome_1 )
       (SID_NAME = orcl)
     )
	 (SID_DESC =
       (GLOBAL_DBNAME = orcl_dr)
       (ORACLE_HOME = /u01/app/oracle/product/12.2.0.1/dbhome_1 )
       (SID_NAME = orcl_dr)
     )
   )
   
#Restart the listener on both sides
lsnrctl stop
lsnrctl start
tnsping orcl
tnsping orcl_dr 

#Send the file in secondary server 
cd $ORACLE_HOME/network/admin/
scp tnsnames.ora listener.ora oracle@secondary:$ORACLE_HOME/network/admin/

#Set the log_archive_config parameter as below.
alter system set log_archive_config='dg_config=(orcl,orcl_dr)';

#Must be set remote_login_passwordfile exclusive.
SQL> show parameter remote_login_passwordfile;

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
remote_login_passwordfile            string      EXCLUSIVE

If not EXCLUSIVE then
alter system set remote_login_passwordfile =exclusive scope=spfile;
exit

#Now update the fal_client & fal_server parameter using the following commands.
alter system set fal_server='ORCL_DR';
alter system set fal_client='ORCL'; 

#Create pfile from spfile for the standby database.
create pfile='/u01/initorcl_dr.ora' from spfile;
cd $ORACLE_HOME/dbs/
scp orapworcl oracle@secondary:$ORACLE_HOME/dbs
cd /u01
scp initorcl_dr.ora oracle@secondary:/u01/

#Create password file for standby: This is needed for cloning purpose. Even if there is one password file in 
$ORACLE_HOME/dbs location, create a new one with standby SID

cd $ORACLE_HOME/dbs/
[oracle@primary ~]$orapwd file=$ORACLE_HOME/dbs/orapworcl_dr entries=10 force=y   [orapw+sidofsecondary]
OR
[oracle@primary dbs]$ orapwd file=$ORACLE_HOME/dbs/orapworcl_dr password=welcome123# 
[oracle@primary dbs]$ scp orapworcl_dr oracle@secondary:$ORACLE_HOME/dbs




==========================================================================
							IN Secondary
==========================================================================
#Modify listener.ora and tnsnames.ora file
lsnrctl start
tnsping orcl
tnsping orcl_dr 

#Make some changes in pfile
cd /u01 
vim initorcl_dr.ora
:%s/orcl/orcl_dr/g 

#change *.db_name='orcl_db' to *.db_name='orcl'
# cnange *.log_archive_dest_2='service=orcl_dr_dr async valid_for=(all_logfiles,primary_role) db_unique_name=orcl_dr_dr'
to *.log_archive_dest_2='service=orcl_dr async noaffirm reopen=15  valid_for=(all_logfiles,primary_role) db_unique_name=orcl_dr'
#Change 
*.fal_client='ORCL'
*.fal_server='ORCL_DR'
to 
*.fal_client='ORCL_DR'
*.fal_server='ORCL'
#Change
*.log_archive_config='dg_config=(orcl_dr,orcl_dr_dr)'
to
*.log_archive_config='dg_config=(orcl,orcl_dr)'

#add line
*.db_file_name_convert='/u01/app/oracle/oradata/orcl','/u01/app/oracle/oradata/orcl_dr'
*.log_file_name_convert='/u01/app/oracle/oradata/orcl/','/u01/app/oracle/oradata/orcl_dr/'
db_unique_name='orcl_dr'

#Make required directories on Standby
mkdir -p /u01/app/oracle/admin/orcl_dr/adump /u01/app/oracle/oradata/orcl_dr /u01/app/oracle/fast_recovery_area/orcl_dr

#Now start standby instance using pfile at nomount stage.
sqlplus / as sysdba
startup nomount pfile=/u01/initorcl_dr.ora;

create spfile from pfile='/u01/initorcl_dr.ora';

From Primary Server
=====================================================================
#Start Duplicating Database using RMAN
rman target sys/Welcome_12#@orcl auxiliary sys/Welcome_12#@orcl_dr 
RMAN> DUPLICATE TARGET DATABASE FOR STANDBY FROM ACTIVE DATABASE NOFILENAMECHECK;



From Primary 
======================================================================
SQL> alter database open read only;
--start MRP command
SQL> alter database recover managed standby database disconnect;

SQL> select name,open_mode from v$database;


On both primary & standby:
==========================
set lines 999;
select * from v$dataguard_status order by timestamp;

select dest_id, status, destination, error from v$archive_dest where dest_id<=2;

IF you see any ORA error like ORA-16058, do this on primary:
============================================================
SQL> alter system set log_archive_dest_state_2='DEFER';
SQL> alter system set log_archive_dest_state_2='ENABLE';
SQL> select dest_id, status, destination, error from v$archive_dest where dest_id<=2;

On primary:
===========
select sequence#, first_time, next_time, applied, archived from v$archived_log where name = 'sec' order by first_time;

select STATUS, GAP_STATUS from V$ARCHIVE_DEST_STATUS where DEST_ID = 2;

archive log list;

On standby:
===========
select process, status, sequence# from v$managed_standby;
select sequence#, applied, first_time, next_time, name filename from v$archived_log order by sequence#;


Configure Archive deletion policy: We must set this policy in order to prevent accidental deletion of archive logs on primary database

On Primary:
===========
rman target / 
configure archivelog deletion policy to applied on all standby;





=========================================================================
							Startup process
=========================================================================
On Secondary
==============================================
startup mount
alter database recover managed standby database disconnect;

Shutdown process
=========================================
On Secondary
==============================================
alter database recover managed standby database cancel;
shut immediate;


On Secondary (Active DataGuard)
==============================================
SQL> alter database recover managed standby database cancel;
SQL> alter database open read only;
SQL> alter database recover managed standby database disconnect;



==========================================================================================================
					Client Connectivity in Data Guard Configuration
===========================================================================================================
When you have a physical standby, you must make sure client connectivity is set properly so that when you perform failover or switchover, client must smoothly connect to the new primary.

Create a database service on primary: This service is created on primary database to connect proddb

exec DBMS_SERVICE.CREATE_SERVICE (service_name => 'prm_rw', network_name => 'prm_rw', failover_method => 'BASIC', failover_type => 'SELECT', failover_retries => 30, failover_delay => 10);
 [ Note: service_name -> any name, _rw used to mean read write ]

Make above service run only on primary:


create or replace procedure prm_rw_service
is
v_role VARCHAR(30);
begin
select DATABASE_ROLE into v_role from V$DATABASE;
if v_role = 'PRIMARY' then
DBMS_SERVICE.START_SERVICE('prm_rw');
else
DBMS_SERVICE.STOP_SERVICE('prm_rw');
end if;
end;
/



Create trigger to start above service: We need to create trigger to start above service on database startup and also role change on primary

TRIGGER TO START SERVICE ON DB STARTUP:
=======================================
create or replace TRIGGER db_startup
after startup on database
begin
prm_rw_service;
end;
/

TRIGGER TO START SERVICE ON DB ROLECHANGE:
==========================================
create or replace TRIGGER db_role_change
after db_role_change on database
begin
prm_rw_service;
end;
/

alter system switch logfile;
exec prm_rw_service;
alter system switch logfile;


D:\app\client\Foyez\product\12.2.0\client_1\network\admin
------------------------------------------------------------------
Edit client tnsnames.ora: We need to enable client tns entries to access database via above service

prm =
  (DESCRIPTION =
    (ADDRESS_LIST=
      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.101)(PORT = 1521))
      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.102)(PORT = 1521))
    )
   (CONNECT_DATA = (SERVICE_NAME = prm_rw)
     (FAILOVER_MODE=(TYPE=SELECT)(METHOD=BASIC)(RETRIES=30)(DELAY=10))
   )
  )    



  
==========================================================================
				Standby Server Setup (Manual)
==========================================================================
Backup Primary Database
If you are planning to use an active duplicate to create the standby database, then this step is unnecessary. For a backup-based duplicate, or a manual restore, take a backup of the primary database.

$ rman target=/

RMAN> BACKUP DATABASE PLUS ARCHIVELOG;
Create Standby Controlfile and PFILE
Create a controlfile for the standby database by issuing the following command on the primary database.

ALTER DATABASE CREATE STANDBY CONTROLFILE AS '/tmp/db11g_stby.ctl';
Create a parameter file for the standby database.

CREATE PFILE='/tmp/initDB11G_stby.ora' FROM SPFILE;
Amend the PFILE making the entries relevant for the standby database. I'm making a replica of the original server, so in my case I only had to amend the following parameters.

*.db_unique_name='DB11G_STBY'
*.fal_server='DB11G'
*.log_archive_dest_2='SERVICE=db11g ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=DB11G'

#Copy Files
#Create the necessary directories on the standby server.

$ mkdir -p /u01/app/oracle/oradata/DB11G
$ mkdir -p /u01/app/oracle/fast_recovery_area/DB11G
$ mkdir -p /u01/app/oracle/admin/DB11G/adump
Copy the files from the primary to the standby server.

$ # Standby controlfile to all locations.
$ scp oracle@ol5-112-dga1:/tmp/db11g_stby.ctl /u01/app/oracle/oradata/DB11G/control01.ctl
$ cp /u01/app/oracle/oradata/DB11G/control01.ctl /u01/app/oracle/fast_recovery_area/DB11G/control02.ctl

$ # Archivelogs and backups
$ scp -r oracle@ol5-112-dga1:/u01/app/oracle/fast_recovery_area/DB11G/archivelog /u01/app/oracle/fast_recovery_area/DB11G
$ scp -r oracle@ol5-112-dga1:/u01/app/oracle/fast_recovery_area/DB11G/backupset /u01/app/oracle/fast_recovery_area/DB11G

$ # Parameter file.
$ scp oracle@ol5-112-dga1:/tmp/initDB11G_stby.ora /tmp/initDB11G_stby.ora

$ # Remote login password file.
$ scp oracle@ol5-112-dga1:$ORACLE_HOME/dbs/orapwDB11G $ORACLE_HOME/dbs
Notice, the backups were copied across to the standby server as part of the FRA copy. If your backups are not held within the FRA, you must make sure you copy them to the standby server and make them available from the same path as used on the primary server.

Start Listener
Make sure the listener is started on the standby server.

$ lsnrctl start
Restore Backup

Create the SPFILE form the amended PFILE.

$ export ORACLE_SID=DB11G
$ sqlplus / as sysdba

SQL> CREATE SPFILE FROM PFILE='/tmp/initDB11G_stby.ora';
Restore the backup files.

$ export ORACLE_SID=DB11G
$ rman target=/

RMAN> STARTUP MOUNT;
RMAN> RESTORE DATABASE;
Create Redo Logs
Create online redo logs for the standby. It's a good idea to match the configuration of the primary server.

ALTER SYSTEM SET STANDBY_FILE_MANAGEMENT=MANUAL;
ALTER DATABASE ADD LOGFILE ('/u01/app/oracle/oradata/DB11G/online_redo01.log') SIZE 50M;
ALTER DATABASE ADD LOGFILE ('/u01/app/oracle/oradata/DB11G/online_redo02.log') SIZE 50M;
ALTER DATABASE ADD LOGFILE ('/u01/app/oracle/oradata/DB11G/online_redo03.log') SIZE 50M;
ALTER SYSTEM SET STANDBY_FILE_MANAGEMENT=AUTO;
In addition to the online redo logs, you should create standby redo logs on both the standby and the primary database (in case of switchovers). The standby redo logs should be at least as big as the largest online redo log and there should be one extra group per thread compared the online redo logs. In my case, the following standby redo logs must be created on both servers.

ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 10 ('/u01/app/oracle/oradata/DB11G/standby_redo01.log') SIZE 50M;
ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 11 ('/u01/app/oracle/oradata/DB11G/standby_redo02.log') SIZE 50M;
ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 12 ('/u01/app/oracle/oradata/DB11G/standby_redo03.log') SIZE 50M;
ALTER DATABASE ADD STANDBY LOGFILE THREAD 1 GROUP 13 ('/u01/app/oracle/oradata/DB11G/standby_redo04.log') SIZE 50M;
Once this is complete, we can start the apply process.

================================================================================  
  
  
  


References:
https://oracle-base.com/articles/12c/oracle-db-12cr2-installation-on-oracle-linux-6-and-7
https://oracle-base.com/articles/11g/data-guard-setup-11gr2
https://ocptechnology.com/step-by-step-to-configure-oracle-12c-data-guard-physical-standby/?unapproved=1650&moderation-hash=9612d5436b5ab43845ec684075d82e5b#comment-1650
https://www.support.dbagenesis.com/post/configure-physical-standby





